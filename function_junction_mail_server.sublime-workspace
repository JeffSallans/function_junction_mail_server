{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"require"
			],
			[
				"go",
				"googleAccountConnected"
			],
			[
				"res",
				"result"
			],
			[
				"em",
				"emailPrefix"
			],
			[
				"google",
				"googleServerAccount"
			]
		]
	},
	"buffers":
	[
		{
			"file": "bin/www",
			"settings":
			{
				"buffer_size": 1786,
				"line_ending": "Windows"
			}
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 836,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"use strict\";\n//@see https://developers.google.com/gmail/api/quickstart/nodejs\n\nvar fs = require('fs');\nvar readline = require('readline');\nvar google = require('googleapis');\nvar googleAuth = require('google-auth-library');\n\n// If modifying these scopes, delete your previously saved credentials\n// at ~/.credentials/gmail-nodejs-quickstart.json\nvar SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];\nvar TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n		process.env.USERPROFILE) + '/.credentials/';\nvar TOKEN_PATH = TOKEN_DIR + 'function-junction-gmail-nodejs-authentication.json';\n\nvar oauth2Connection = null;\n\nvar googleAccountManagement = {\n	setupConnection: setupOauthConnection,\n	getConnection: getOauthConnection,\n	example: listLabels\n};\n\nmodule.exports = googleAccountManagement;\n\n/**\n * Create an OAuth2 client with the given credentials\n * \n * @return {Promise resolves google.auth.OAuth2}\n */\nfunction setupOauthConnection() {\n\n	return new Promise( (resolve, reject) => {\n\n		// Load client secrets from a local file.\n		fs.readFile('client_secret.json', function processClientSecrets(err, content) {\n			if (err) {\n				console.log('Error loading client secret file: ' + err);\n				reject();\n				return;\n			}\n			// Authorize a client with the loaded credentials, then call the\n			// Gmail API.\n			authorize(JSON.parse(content))\n			.then((newOauth2Connection) => {\n				oauth2Connection = newOauth2Connection;\n				resolve(newOauth2Connection);\n			});\n		});\n	});\n}\n\nfunction getOauthConnection() {\n\n	//Check if Oauth connection has been setup\n	if (oauth2Connection == null) {\n		\n	}\n\n	return oauth2Connection;\n}\n\n/**\n * Create an OAuth2 client with the given credentials.\n *\n * @param {Object} credentials The authorization client credentials.\n * @returns {Promise resolves google.auth.OAuth2} A promise that resolves when the connection is verified.\n */\nfunction authorize(credentials) {\n	var clientSecret = credentials.installed.client_secret;\n	var clientId = credentials.installed.client_id;\n	var redirectUrl = credentials.installed.redirect_uris[0];\n	var auth = new googleAuth();\n	var oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);\n\n	return new Promise( (resolve, reject) => {\n\n		// Check if we have previously stored a token.\n		fs.readFile(TOKEN_PATH, function(err, token) {\n			if (err) {\n				getNewToken(oauth2Client)\n				.then(resolve);\n			}\n			else {\n				oauth2Client.credentials = JSON.parse(token);\n				resolve(oauth2Client);\n			}\n		});\n	});\n}\n\n/**\n * Get and store new token after prompting for user authorization, and returns a promise of the authorized OAuth2 client.\n *\n * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.\n * @returns {Promise resolves google.auth.OAuth2} A promise that resolves when the token is retrieved.\n * \n */\nfunction getNewToken(oauth2Client) {\n	var authUrl = oauth2Client.generateAuthUrl({\n		access_type: 'offline',\n		scope: SCOPES\n	});\n	console.log('Authorize this app by visiting this url: ', authUrl);\n	var rl = readline.createInterface({\n		input: process.stdin,\n		output: process.stdout\n	});\n\n	return new Promise( (resolve, reject) => {\n\n		rl.question('Enter the code from that page here: ', function(code) {\n			rl.close();\n			oauth2Client.getToken(code, function(err, token) {\n				if (err) {\n					console.log('Error while trying to retrieve access token', err);\n					reject();\n					return;\n				}\n				oauth2Client.credentials = token;\n				storeToken(token);\n				resolve(oauth2Client);\n			});\n		});\n	});\n\n}\n\n/**\n * Store token to disk be used in later program executions.\n *\n * @param {Object} token The token to store to disk.\n */\nfunction storeToken(token) {\n	try {\n		fs.mkdirSync(TOKEN_DIR);\n	} catch (err) {\n		if (err.code != 'EEXIST') {\n			throw err;\n		}\n	}\n	fs.writeFile(TOKEN_PATH, JSON.stringify(token));\n	console.log('Token stored to ' + TOKEN_PATH);\n}\n\n/**\n * Lists the labels in the user's account.\n */\nfunction listLabels() {\n\n	setupGoogleOauthConnection()\n	.then( (auth) => {\n\n		var gmail = google.gmail('v1');\n		gmail.users.labels.list({\n			auth: auth,\n			userId: 'me',\n		}, function(err, response) {\n			if (err) {\n				console.log('The API returned an error: ' + err);\n				return;\n			}\n			var labels = response.labels;\n			if (labels.length == 0) {\n				console.log('No labels found.');\n			} else {\n				console.log('Labels:');\n				for (var i = 0; i < labels.length; i++) {\n					var label = labels[i];\n					console.log('- %s', label.name);\n				}\n			}\n		});\n	});\n}",
			"file": "googleAccountManagement.js",
			"file_size": 4574,
			"file_write_time": 131108410906089414,
			"settings":
			{
				"buffer_size": 4491,
				"line_ending": "Windows"
			}
		},
		{
			"file": "client_secret.json",
			"settings":
			{
				"buffer_size": 432,
				"line_ending": "Windows"
			}
		},
		{
			"file": "service-account-details.json",
			"settings":
			{
				"buffer_size": 669,
				"line_ending": "Unix"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 597,
				"line_ending": "Windows"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 1721,
				"line_ending": "Windows"
			}
		},
		{
			"file": "service-account-key.pem",
			"settings":
			{
				"buffer_size": 1704,
				"line_ending": "Windows"
			}
		},
		{
			"file": "routes/status.js",
			"settings":
			{
				"buffer_size": 805,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 432.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/jsallans/ptl/function_junction_mail_server",
		"/C/Users/jsallans/ptl/function_junction_mail_server/bin",
		"/C/Users/jsallans/ptl/function_junction_mail_server/routes"
	],
	"file_history":
	[
		"/C/Users/jsallans/ptl/function_junction_mail_server/npm-debug.log",
		"/C/Users/jsallans/ptl/function_junction_mail_server/package.json",
		"/C/Users/jsallans/ptl/function_junction_mail_server/bin/www",
		"/C/Users/jsallans/ptl/function_junction_mail_server/quickstart.js",
		"/C/Users/jsallans/ptl/function_junction_mail_server/.gitignore",
		"/C/Users/jsallans/ptl/function_junction_mail_server/app.js",
		"/C/Users/jsallans/ptl/function_junction_mail_server/routes/status.js",
		"/C/Users/jsallans/ptl/function_junction_mail_server/README.md",
		"/C/Users/jsallans/ptl/function_junction_mail_server/config"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\\\\n",
			"});\n",
			"googleServerAccount",
			"callback",
			"logger",
			"debug",
			"__dirname",
			"config",
			"getToken"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\n"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "bin/www",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1786,
						"regions":
						{
						},
						"selection":
						[
							[
								663,
								663
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 836,
						"regions":
						{
						},
						"selection":
						[
							[
								260,
								260
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "googleAccountManagement.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4491,
						"regions":
						{
						},
						"selection":
						[
							[
								3591,
								3591
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "client_secret.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 432,
						"regions":
						{
						},
						"selection":
						[
							[
								432,
								432
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "service-account-details.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 669,
						"regions":
						{
						},
						"selection":
						[
							[
								161,
								161
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 597,
						"regions":
						{
						},
						"selection":
						[
							[
								596,
								596
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1721,
						"regions":
						{
						},
						"selection":
						[
							[
								1441,
								1441
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 15.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "service-account-key.pem",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1704,
						"regions":
						{
						},
						"selection":
						[
							[
								1704,
								1704
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "routes/status.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 805,
						"regions":
						{
						},
						"selection":
						[
							[
								427,
								427
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "function_junction_mail_server.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 207.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
